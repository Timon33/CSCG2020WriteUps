import math
from Crypto.Util.number import long_to_bytes, bytes_to_long, inverse

n = "57C88F1C9B9ED47D844F87B29F44796E17CE47C2FE24CC1AB7E34432B335212463D2399D074711800572EA6812E2901202BC5F190CCB4966D570904A41697A6364488AE140B1B6357FC6A6B4ACCD517A7403BBC996DFD072895F6A9A1EA8F2A6DAB69DA15575177F4CEF1ADB90825BBD4FEC5001AAC01A70E8A10E101334713932BE47D1A09D70D31157FE26E553774F8D9E502098472BCA8707931E2BC9CB92AAC94451BE6F1E558B93A8685CE984F4840AFAF8D2A8AD0D46545462A918151A50DEA1A28F4DF1E5E699B0052DA523059EB21D56B67C91E56AB75F35BC9F649BEA76A136B170D3A676F514B9C8955EAF78A90BADD5485BBA7F12178B1F8FEFEF"
n = int(n, 16)

c = 6213639477312598145146606285597413094756028916460209994926376562685721597532354994527411261035070313371565996179096901618661905020103824302567694878011247857685359643790779936360396061892681963343509949795893998949164356297380564973147847768251471545846793414196863838506235390508670540548621210855302903513284961283614161501466772253041178512706947379642827461605012461899803919210999488026352375214758873859352222530502137358426056819293786590877544792321648180554981415658300194184367096348141488594780860400420776664995973439686986538967952922269183014996803258574382869102287844486447643771783747439478831567060

e = 65537

def isqrt(x):
    r = 1 << ((n.bit_length() + 1) >> 1)
    while True:
        newr = (r + n // r) >> 1
        if newr >= r:
            return r
        r = newr

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m


#Fermat factoring algorithm
k = isqrt(n) + 1

while True:
	h = math.sqrt(k*k - n)
	if h == int(h):
		print("k: {}".format(k))
		print("h: {}".format(int(h)))
		break;
	k += 1

h = int(h)

p = k + h
q = k - h

if n != p * q:
	print("something is worong")
	exit(1)

pi = (p - 1)*(q - 1)

d = modinv(e, pi)
print("d: {}".format(d))

m = pow(c, d, n)
print("message: " + long_to_bytes(m).decode())